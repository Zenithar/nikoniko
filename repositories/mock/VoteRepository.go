package mocks

import api "zenithar.org/go/common/dao/api"
import domain "zenithar.org/go/nikoniko/domain"
import mock "github.com/stretchr/testify/mock"
import repositories "zenithar.org/go/nikoniko/repositories"

// VoteRepository is an autogenerated mock type for the VoteRepository type
type VoteRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *VoteRepository) Delete(_a0 string) (*domain.Vote, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Vote
	if rf, ok := ret.Get(0).(func(string) *domain.Vote); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Vote)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0
func (_m *VoteRepository) Get(_a0 string) (*domain.Vote, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Vote
	if rf, ok := ret.Get(0).(func(string) *domain.Vote); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Vote)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0
func (_m *VoteRepository) Register(_a0 domain.Vote) (*domain.Vote, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Vote
	if rf, ok := ret.Get(0).(func(domain.Vote) *domain.Vote); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Vote)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Vote) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: _a0, _a1, _a2
func (_m *VoteRepository) Search(_a0 *repositories.VoteSearchFilter, _a1 *api.SortParameters, _a2 *api.Pagination) ([]*domain.Vote, uint64, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*domain.Vote
	if rf, ok := ret.Get(0).(func(*repositories.VoteSearchFilter, *api.SortParameters, *api.Pagination) []*domain.Vote); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Vote)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(*repositories.VoteSearchFilter, *api.SortParameters, *api.Pagination) uint64); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*repositories.VoteSearchFilter, *api.SortParameters, *api.Pagination) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *VoteRepository) Update(_a0 string, _a1 domain.Vote) (*domain.Vote, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domain.Vote
	if rf, ok := ret.Get(0).(func(string, domain.Vote) *domain.Vote); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Vote)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, domain.Vote) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ repositories.VoteRepository = (*VoteRepository)(nil)
